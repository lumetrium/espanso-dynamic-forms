schema:
  type: object
  properties:
    taskType:
      type: string
      enum:
        - discuss
        - explain
        - fix
        - improve
        - document
        - debug
        - review
        - refactor
        - optimize
        - suggest_alternatives
        - generate_types
        - add_feature
        - write
        - finish
    code:
      type: string
    language:
      type: string
      enum:
        - typescript
        - javascript
        - html
        - css
        - scss
        - php
        - yaml
        - json
        - postgresql
        - sql
        - autohotkey_v1
        - other
    framework:
      type: string
      enum:
        - vue3
        - nestjs
        - nodejs
        - django
        - other
        - none
    fileContext:
      type: string
    errorMessage:
      type: string
    issue:
      type: string
    expectedBehavior:
      type: string
    context:
      type: string
    relatedCode:
      type: string
    contextFiles:
      type: array
      format: file
    requirements:
      type: array
      items:
        type: string
        enum:
          - No regressions to existing behavior
          - Match existing code style in the file
          - Keep functions small and focused
          - Prefer clear names over comments
          - Keep API backward compatible unless stated otherwise
          - Avoid external dependencies unless justified
      uniqueItems: true
    customRequirements:
      type: array
      items:
        type: string
    outputFormat:
      type: array
      items:
        type: string
        enum:
          - Provide complete, runnable code examples
          - Include brief explanations for complex logic
          - Explain the specific changes made
          - Show before/after comparisons when refactoring
      uniqueItems: true
    customOutputFormat:
      type: array
      items:
        type: string
  required:
    - taskType

uischema:
  type: Categorization
  elements:
    - type: Category
      label: Code & Task
      elements:
        - type: VerticalLayout
          elements:
            - type: Control
              scope: '#/properties/taskType'
              label: What do you need help with?
              options:
                format: radio
                vuetify:
                  v-radio-group:
                    inline: true
                    hideDetails: true
            - type: HorizontalLayout
              options:
                vuetify:
                  v-col:
                    padding: 0
              elements:
                - type: Control
                  scope: '#/properties/language'
                  label: Language
                  options:
                    format: select
                    vuetify:
                      v-autocomplete:
                        hideDetails: true
                - type: Control
                  scope: '#/properties/framework'
                  label: Framework/Library
                  options:
                    format: select
                    vuetify:
                      v-autocomplete:
                        hideDetails: true
            - type: Control
              scope: '#/properties/issue'
              label: Specific issue or question
              options:
                multi: true
                vuetify:
                  v-textarea:
                    rows: 5
            - type: Control
              scope: '#/properties/errorMessage'
              label: Error message or stack trace
              options:
                multi: true
            - type: Control
              scope: '#/properties/fileContext'
              label: File context (filename, line numbers, function name)
            - type: Control
              scope: '#/properties/code'
              label: Code
              options:
                multi: true
                vuetify:
                  v-textarea:
                    rows: 20
    - type: Category
      label: Context
      elements:
        - type: VerticalLayout
          elements:
            - type: Control
              scope: '#/properties/expectedBehavior'
              label: Expected behavior (what should this code do?)
              options:
                multi: true
            - type: Control
              scope: '#/properties/context'
              label: Additional context (project details, constraints, dependencies)
              options:
                multi: true
            - type: Control
              scope: '#/properties/relatedCode'
              label: Related code or files
              options:
                multi: true
            - type: Control
              scope: '#/properties/contextFiles'
              label: Upload context files
              options:
                accept: '*'
    - type: Category
      label: Output & Requirements
      elements:
        - type: VerticalLayout
          elements:
            - type: Control
              scope: '#/properties/requirements'
              label: Specific requirements or constraints
              options:
                format: checkbox
                vuetify:
                  v-input:
                    class: vertical
            - type: Control
              scope: '#/properties/customRequirements'
              label: Additional custom requirements
            - type: Control
              scope: '#/properties/outputFormat'
              label: Output preferences
              options:
                format: checkbox
                vuetify:
                  v-input:
                    class: vertical
            - type: Control
              scope: '#/properties/customOutputFormat'
              label: Additional custom output preferences

data:
  taskType: discuss
  code: '{{clipboard}}'
  language: typescript
  requirements: []
  customRequirements:
    - ""
  outputFormat: []
  customOutputFormat:
    - ""
  contextFiles: []

template: |
  {% case taskType %}
  {% when 'discuss' %}
  I'd like to discuss this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code with you:
  {% when 'explain' %}
  Explain how this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code works:
  {% when 'fix' %}
  Help me fix this broken {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'improve' %}
  Help me improve this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'document' %}
  Help me document this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'debug' %}
  Help me debug this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'review' %}
  Please review this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'refactor' %}
  Help me refactor this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'optimize' %}
  Help me optimize this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'suggest_alternatives' %}
  Suggest alternative approaches for this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'generate_types' %}
  Generate TypeScript types for this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'add_feature' %}
  Help me add a new feature to this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'write' %}
  Help me write {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% when 'finish' %}
  Help me finish this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% else %}
  Help me {{taskType}} this {{language}}{% if framework and framework != 'none' %} ({{framework}}){% endif %} code:
  {% endcase %}

  {% if fileContext %}
  ## File
  {{fileContext}}
  {% endif %}

  {% if code != blank %}
  ````{{language}}
  {{code}}
  ````
  {% endif %}

  {% if errorMessage %}
  ## Error/Stack Trace
  ````
  {{errorMessage}}
  ````
  {% endif %}

  {% if issue %}
  {% case taskType %}
  {% when 'fix' or 'debug' %}
  ## Problem Description
  {% when 'add_feature' %}
  ## Feature Requirements
  {% when 'review' %}
  ## Review Focus
  {% when 'optimize' %}
  ## Performance Concerns
  {% when 'refactor' %}
  ## Refactoring Goals
  {% when 'document' %}
  ## Documentation Focus
  {% when 'write' %}
  ## Main Requirements
  {% when 'finish' %}
  ## Completion Goals
  {% else %}
  ## Question
  {% endcase %}
  {{issue}}
  {% endif %}


  {% if expectedBehavior %}
  ## Expected Behavior
  {{expectedBehavior}}
  {% endif %}

  {% if context %}
  ## Context
  {{context}}
  {% endif %}

  {% if relatedCode %}
  ## Related Code
  ````
  {{relatedCode}}
  ````
  {% endif %}

  {% if contextFiles.size > 0 %}
  ## Files for Context
  {% for file in contextFiles %}
  {{file.fullName}}
  ````
  {{file.text}}
  ````
  {% endfor %}
  {% endif %}

  {% assign allRequirements = requirements | concat: customRequirements %}
  {% assign filteredRequirements = allRequirements | where_exp: "item", "item != ''" %}
  {% if filteredRequirements.size > 0 %}
  ## Requirements
  - {{filteredRequirements | join: '\n- '}}
  {% endif %}

  {% assign allOutputFormat = outputFormat | concat: customOutputFormat %}
  {% assign filteredOutputFormat = allOutputFormat | where_exp: "item", "item != ''" %}
  {% if filteredOutputFormat.size > 0 %}
  ## Output Preferences
  - {{filteredOutputFormat | join: '\n- '}}
  {% endif %}
